// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  FREELANCER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum JobType {
  FIXED
  HOURLY
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum MilestoneStatus {
  PENDING
  PAID
  RELEASED
}

enum EscrowStatus {
  FUNDED
  RELEASED
  REFUNDED
}

enum DisputeStatus {
  OPEN
  RESOLVED
  REJECTED
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password_hash String
  role          UserRole   @default(CLIENT)
  status        UserStatus @default(ACTIVE)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  // Relations
  profile         Profile?
  owned_jobs      Job[]          @relation("JobOwner")
  proposals       Proposal[]
  sent_messages   Message[]      @relation("MessageSender")
  received_messages Message[]    @relation("MessageReceiver")
  notifications   Notification[]
  reviews_given   Review[]       @relation("ReviewGiver")
  reviews_received Review[]      @relation("ReviewReceiver")
  raised_disputes Dispute[]

  @@map("users")
}

model Profile {
  id           String   @id @default(uuid())
  user_id      String   @unique
  display_name String?
  trust_score  Float    @default(0.0)
  level        Int      @default(1)
  badges       Json?    @default("{}")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Job {
  id          String    @id @default(uuid())
  owner_user_id String
  type        JobType   @default(FIXED)
  title       String
  description String
  location    String?
  budget_min  Decimal?  @db.Decimal(12, 2)
  budget_max  Decimal?  @db.Decimal(12, 2)
  status      JobStatus @default(OPEN)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  owner     User         @relation("JobOwner", fields: [owner_user_id], references: [id])
  proposals Proposal[]

  @@map("jobs")
}

model Proposal {
  id             String         @id @default(uuid())
  job_id         String
  bidder_user_id String
  amount         Decimal        @db.Decimal(12, 2)
  counter_amount Decimal?       @db.Decimal(12, 2)
  status         ProposalStatus @default(PENDING)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  // Relations
  job    Job        @relation(fields: [job_id], references: [id], onDelete: Cascade)
  bidder User       @relation(fields: [bidder_user_id], references: [id])
  contract Contract?

  @@unique([job_id, bidder_user_id])
  @@map("proposals")
}

model Contract {
  id          String         @id @default(uuid())
  proposal_id String         @unique
  status      ContractStatus @default(ACTIVE)
  start_date  DateTime       @default(now())
  end_date    DateTime?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  // Relations
  proposal   Proposal    @relation(fields: [proposal_id], references: [id])
  milestones Milestone[]
  reviews    Review[]
  disputes   Dispute[]

  @@map("contracts")
}

model Milestone {
  id          String          @id @default(uuid())
  contract_id String
  title       String
  amount      Decimal         @db.Decimal(12, 2)
  due_date    DateTime
  status      MilestoneStatus @default(PENDING)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt

  // Relations
  contract Contract @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  escrow   Escrow?

  @@map("milestones")
}

model Escrow {
  id           String       @id @default(uuid())
  milestone_id String       @unique
  amount       Decimal      @db.Decimal(12, 2)
  status       EscrowStatus @default(FUNDED)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  // Relations
  milestone Milestone @relation(fields: [milestone_id], references: [id], onDelete: Cascade)

  @@map("escrows")
}

model Review {
  id          String   @id @default(uuid())
  contract_id String
  reviewer_id String
  reviewee_id String
  rating      Int      @db.SmallInt // 1-5 rating
  comment     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  contract Contract @relation(fields: [contract_id], references: [id])
  reviewer User     @relation("ReviewGiver", fields: [reviewer_id], references: [id])
  reviewee User     @relation("ReviewReceiver", fields: [reviewee_id], references: [id])

  @@unique([contract_id, reviewer_id])
  @@map("reviews")
}

model Message {
  id          String   @id @default(uuid())
  sender_id   String
  receiver_id String
  content     String
  read_status Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  sender   User @relation("MessageSender", fields: [sender_id], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiver_id], references: [id])

  @@map("messages")
}

model Notification {
  id          String   @id @default(uuid())
  user_id     String
  type        String
  message     String
  read_status Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Dispute {
  id                 String        @id @default(uuid())
  contract_id        String
  raised_by_user_id  String
  reason             String
  status             DisputeStatus @default(OPEN)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt

  // Relations
  contract    Contract @relation(fields: [contract_id], references: [id])
  raised_by   User     @relation(fields: [raised_by_user_id], references: [id])

  @@map("disputes")
}